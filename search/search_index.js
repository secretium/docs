var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Secretium","text":"<p>A smart self-hosted tool for sharing secrets to your friends.</p>"},{"location":"complete-user-guide/index.html","title":"Complete user guide","text":"<p>This section contains detailed instructions on how to use all the features of the Gowebly CLI.</p>"},{"location":"complete-user-guide/index.html#from-the-beginning","title":"From the beginning","text":"<p>We always treasure your time and want you to start building really great web products on this awesome technology stack as soon as possible! Therefore, to get a complete guide to use and understand the basic principles of the Gowebly CLI, we have prepared a comprehensive explanation of the project in this Complete user guide.</p> <p>We have taken care to make it as comfortable as possible for you to learn this wonderful tool, so each CLI command has a sufficient textual description, as well as a visual diagram of how it works.</p> <p>Hope you find answers to all of your questions! </p> <p>Can't find the answer?</p> <p>If you can't find the answer to your question here, feel free to create an issue in the Gowebly CLI repository or send a PR to the Gowebly Docs repository.</p>"},{"location":"complete-user-guide/index.html#the-learning-path","title":"The learning path","text":"<p>It is highly recommended to start exploring with a short introductory article \"How does it work?\" to understand the basic principle and the main components built into the Gowebly CLI.</p> <p>Next steps are:</p> <ul> <li> Install the CLI to your system</li> <li> Configure your project</li> <li> Start creating a new project</li> <li> Running your project locally</li> <li> Build your project for the production</li> </ul>"},{"location":"complete-user-guide/configuration/index.html","title":"Configuration","text":"<p>We recommend creating a config file before starting a new project.</p> <p>You can do this by using the built-in <code>init</code> command:</p>  CLIGoDocker <pre><code>gowebly init\n</code></pre> <pre><code>go run github.com/gowebly/gowebly@latest init\n</code></pre> <pre><code>docker run --rm -it -v ${PWD}:${PWD} -w ${PWD} gowebly/gowebly:latest init\n</code></pre> <p></p> <p>This command create a default config file called <code>.gowebly.yml</code> in the current folder with the following settings:</p> .gowebly.yml<pre><code>backend:\n   module_name: project #(1)!\n   go_framework: default #(2)!\n   template_engine: default #(3)!\n   port: 7000 #(4)!\n   timeout:\n      read: 5 #(5)!\n      write: 10 #(6)!\n\nfrontend:\n   package_name: project #(7)!\n   css_framework: default #(8)!\n   runtime_environment: default #(9)!\n   htmx: latest #(10)!\n   hyperscript: latest #(11)!\n</code></pre> <ol> <li>(string) option can be any name of your Go module</li> <li>(string) option can be one of the values: <code>fiber</code>, <code>gin</code>, <code>echo</code>, <code>chi</code>, <code>httprouter</code>, or <code>default</code></li> <li>(string) option can be one of the values: <code>templ</code>, or <code>default</code></li> <li>(int) option can be any port that is not taken up on your system</li> <li>(int) option can be any number of seconds, <code>5</code> is recommended</li> <li>(int) option can be any number of seconds, <code>10</code> is recommended</li> <li>(string) option can be any name of your <code>package.json</code></li> <li>(string) option can be one of the values: <code>tailwindcss</code>, <code>unocss</code>, or <code>default</code></li> <li>(string) option can be one of the values: <code>bun</code>, or <code>default</code></li> <li>(string) option can be any existing version of htmx</li> <li>(string) option can be any existing version of hyperscript</li> </ol> <p>Edit it with your own.</p> <p>Skipping the <code>init</code> command</p> <p>Of course, you can skip this step if you're comfortable with the following default configuration for your new project:</p> <ul> <li>Go module (<code>go.mod</code>) and <code>package.json</code> names are set to project;</li> <li>Without any Go framework for the backend part (only built-in net/http package);</li> <li>With a default template engine (only built-in html/template package);</li> <li>Without any CSS framework for the frontend part (only default styles for the code example);</li> <li>The JavaScript runtime environment for the frontend part is set to Node.js;</li> <li>Server port is <code>7000</code>, timeout (in seconds): <code>5</code> for read, <code>10</code> for write;</li> <li>Latest versions of the htmx &amp; hyperscript.</li> </ul>"},{"location":"complete-user-guide/configuration/index.html#backend","title":"Backend","text":"<p>A required block with backend settings to be used for your project.</p>"},{"location":"complete-user-guide/configuration/index.html#module-name","title":"Module name","text":"<p>The name of the Go module to be used in the <code>go.mod</code> file.</p> <pre><code>backend:\n   module_name: project\n</code></pre> <p>The <code>module_name</code> option can be any string with a simple module name or URL (for example, <code>github.com/user/project</code>).</p> <p>Default value is <code>project</code>.</p>"},{"location":"complete-user-guide/configuration/index.html#go-framework","title":"Go framework","text":"<p>The name of the Go web framework (or router) to use as the backend.</p> <pre><code>backend:\n   go_framework: default\n</code></pre> <p>The <code>go_framework</code> option can be one of the string values:</p> Value Description <code>default</code> Don't use any Go framework (only built-in net/http package) <code>fiber</code> Use the Fiber web framework as a Go backend <code>gin</code> Use the Gin web framework as a Go backend <code>echo</code> Use the Echo web framework as a Go backend <code>chi</code> Use the Chi composable router as a Go backend <code>httprouter</code> Use the HttpRouter high performance router as a Go backend <p>Default value is <code>default</code>.</p>"},{"location":"complete-user-guide/configuration/index.html#template-engine","title":"Template engine","text":"<p>The name of the template engine to use with the Go web framework.</p> <pre><code>backend:\n   template_engine: default\n</code></pre> <p>The <code>template_engine</code> option can be one of the string values:</p> Value Description <code>default</code> Don't use any template engines (only built-in html/template package) <code>templ</code> Use the Templ template engine <p>Default value is <code>default</code>.</p>"},{"location":"complete-user-guide/configuration/index.html#server-port","title":"Server port","text":"<p>The port to be used for the Go backend.</p> <pre><code>backend:\n   port: 7000\n</code></pre> <p>The <code>port</code> option can be any positive number.</p> <p>Be careful!</p> <p>The port you define in the configuration should not be taken up on your system.</p> <p>Default value is <code>7000</code>.</p>"},{"location":"complete-user-guide/configuration/index.html#timeout","title":"Timeout","text":"<p>The timeout (in seconds) for the read and write operations for the Go backend.</p> <pre><code>backend:\n   timeout:\n      read: 5\n      write: 10\n</code></pre> <p>The <code>read</code> and <code>write</code> options in the <code>timeout</code> block can be any positive number.</p> <p>Read and write timeouts</p> <p>The recommended values are <code>5</code> for read and <code>10</code> for write. For more information, see this Cloudflare blog post.</p> <p>Default values are <code>5</code> for read and <code>10</code> for write.</p>"},{"location":"complete-user-guide/configuration/index.html#frontend","title":"Frontend","text":"<p>A required block with frontend settings to be used for your project.</p>"},{"location":"complete-user-guide/configuration/index.html#package-name","title":"Package name","text":"<p>The name of the Node.js package to be used in the <code>package.json</code> file.</p> <pre><code>frontend:\n   package_name: project\n</code></pre> <p>The <code>package_name</code> option can be any string with a simple package name (for example, <code>project</code>).</p> <p>Default value is <code>project</code>.</p>"},{"location":"complete-user-guide/configuration/index.html#css-framework","title":"CSS framework","text":"<p>The name of the CSS framework to use for the frontend.</p> <pre><code>frontend:\n   css_framework: default\n</code></pre> <p>The <code>css_framework</code> option can be one of the string values:</p> Value Description <code>default</code> Don't use any CSS framework (only default styles for the code example) <code>tailwindcss</code> Use the Tailwind CSS as a CSS framework <code>unocss</code> Use the UnoCSS as a CSS framework <p>Default value is <code>default</code>.</p>"},{"location":"complete-user-guide/configuration/index.html#javascript-runtime-environment","title":"JavaScript runtime environment","text":"<p>The name of the JavaScript runtime environment to use for the frontend.</p> <pre><code>frontend:\n   runtime_environment: default\n</code></pre> <p>The <code>runtime_environment</code> option can be one of the string values:</p> Value Description <code>default</code> Use the Node.js as a JavaScript runtime environment <code>bun</code> Use the Bun as a JavaScript runtime environment <p>Default value is <code>default</code>.</p>"},{"location":"complete-user-guide/configuration/index.html#version-of-htmx","title":"Version of htmx","text":"<p>The version of the htmx to use for the frontend.</p> <pre><code>frontend:\n   htmx: latest\n</code></pre> <p>The <code>htmx</code> option can be a string with any existing version or <code>latest</code> (for the latest version).</p> <p>Default value is <code>latest</code>.</p>"},{"location":"complete-user-guide/configuration/index.html#version-of-hyperscript","title":"Version of hyperscript","text":"<p>The version of the hyperscript to use for the frontend.</p> <pre><code>frontend:\n   hyperscript: latest\n</code></pre> <p>The <code>hyperscript</code> option can be a string with any existing version or <code>latest</code> (for the latest version).</p> <p>Default value is <code>latest</code>.</p>"},{"location":"complete-user-guide/configure-proxy-web-server/index.html","title":"Configure proxy/web server","text":"<p>Link the container to a web/proxy server (via Nginx Proxy Manager, for example).</p>"},{"location":"complete-user-guide/get-ssl-certificate/index.html","title":"Get SSL certificate","text":"<p>Get Let's Encrypt SSL certificate for your domain. Add it to the web/proxy server to make Secretium available over HTTPS.</p>"},{"location":"complete-user-guide/how-does-it-work/index.html","title":"How does it work?","text":"<p>The Gowebly CLI is built on top of the Go programming language.</p> <p>Therefore, it can run successfully on any supported system and architecture as an executable application. All the templates for the project (both backend and frontend) that it generates as a result of its work are already included in this executable. That is, you do not need any additional files to work with the CLI.</p> <p>A lot of the processes that the CLI runs under the hood are executed in parallel, thanks to goroutines.</p>"},{"location":"complete-user-guide/how-does-it-work/index.html#backend-part","title":"Backend part","text":"<p>The templates for the backend part of your project have been thoroughly tested and contain only the features and parameters you need to get started. You can use them as a good start and improve them as your project grows.</p> <p>To be more efficient, the CLI supports the Templ templating engine. With its help, you can rapidly create UIs for your project without leaving the traditional Go environment. All templates are regular Go functions, without having to create additional HTML templates and deal with the built-in Go templating engine (from the <code>html/template</code> package).</p>"},{"location":"complete-user-guide/how-does-it-work/index.html#frontend-part","title":"Frontend part","text":"<p>To create a build for the frontend part, the quick and easy Parcel bundler version <code>2</code> was chosen. This allowed us to reduce the unnecessarily stressful moment of frontend build to the maximum. No more need to understand configurations, the CLI has already prepared it for you.</p>"},{"location":"complete-user-guide/how-does-it-work/index.html#javascript-runtime-environment","title":"JavaScript runtime environment","text":"<p>We keep up with the latest updates to frontend development tools, so the CLI supports two JavaScript runtime environments: via the standard Node.js and the new and extremely fast Bun (which is backwards compatible with Node.js). You can choose whichever you like best for your project in the CLI settings.</p>"},{"location":"complete-user-guide/how-does-it-work/index.html#htmx-hyperscript","title":"htmx &amp; hyperscript","text":"<p>The CLI also includes an HTTP client that allows background downloading of htmx and hyperscript JavaScript files from a remote CDN for further use in your project.</p>"},{"location":"complete-user-guide/how-does-it-work/index.html#deploy","title":"Deploy","text":"<p>To successfully deploy your project to a remote server (or in the cloud), the CLI has pre-prepared Docker files (<code>docker-compose.yml</code> and <code>Dockerfile</code>). They already contain all the settings you need to create an isolated container exactly with your project.</p>"},{"location":"complete-user-guide/how-does-it-work/index.html#conclusion","title":"Conclusion","text":"<p>All of this together gives us the confidence to say that you will enjoy working with the Gowebly CLI, whatever your experience in code and web development! </p>"},{"location":"complete-user-guide/installation/index.html","title":"Installation","text":"<p>The basics for installing the Secretium project on your remote server are covered in this section.</p>"},{"location":"complete-user-guide/installation/index.html#prepare-your-remote-server","title":"Prepare your remote server","text":"<p>First of all, login to your remote server and install Docker with the Compose plugin.</p> <p>Pre-configured Docker on your server?</p> <p>Most cloud providers have a pre-configured version of the image containing Docker and Docker Compose out of the box. Usually, such an image takes care of setting up the Docker environment and all necessary plugins. Check with your cloud support team to find out.</p>"},{"location":"complete-user-guide/installation/index.html#create-files-for-the-sensitive-data","title":"Create files for the sensitive data","text":"<p>For the security reasons, create the TXT files with the sensitive data to use them with the Docker Secrets.</p> <ul> <li> For the secret key to encrypt data:</li> </ul> <pre><code>echo \"this-is-my-secret-key-123\" &gt; secretium_key.txt\n</code></pre> <ul> <li> For the master username to login to the dashboard as admin:</li> </ul> <pre><code>echo \"this-is-my-master-username\" &gt; secretium_master_username.txt\n</code></pre> <ul> <li> For the master password to login to the dashboard as admin:</li> </ul> <pre><code>echo \"this-is-my-master-password-123\" &gt; secretium_master_password.txt\n</code></pre> <ul> <li> For the domain name of the project to share links:</li> </ul> <pre><code>echo \"example.com\" &gt; secretium_domain.txt\n</code></pre> <p>Naming of the TXT files</p> <p>You can use any name for the TXT files, but don't forget to change it in the <code>docker-compose.yml</code> file.</p>"},{"location":"complete-user-guide/installation/index.html#run-automatic-installation-script","title":"Run automatic installation script","text":"<p>Run the official <code>install.sh</code> installation script from the Secretium website:</p> <pre><code>wget -O - https://secretium.org/sh/install | bash\n</code></pre> <p>This script will automatically:</p> <ul> <li> Create a <code>docker-compose.yml</code> file with the all of the required parameters.</li> <li> Create a <code>./secretium-data</code> folder for the SQLite database.</li> </ul>"},{"location":"complete-user-guide/installation/index.html#docker-compose","title":"Docker Compose","text":"<p>Edit the downloaded <code>docker-compose.yml</code> file with your parameters:</p> docker-compose.yml<pre><code>version: '3.8'\n\nservices:\n\n  secretium:\n    image: 'secretium/secretium:latest' #(1)!\n    restart: unless-stopped #(2)!\n    ports:\n      - '8787:8787' #(3)!\n    environment:\n      SECRET_KEY: /run/secrets/secretium_key\n      MASTER_USERNAME: /run/secrets/secretium_master_username\n      MASTER_PASSWORD: /run/secrets/secretium_master_password\n      DOMAIN: /run/secrets/secretium_domain\n      DOMAIN_SCHEMA: https #(4)!\n      SERVER_PORT: 8787 #(5)!\n      SERVER_TIMEZONE: Europe/Moscow #(6)!\n      SERVER_READ_TIMEOUT: 5 #(7)!\n      SERVER_WRITE_TIMEOUT: 10 #(8)!\n    volumes:\n      - ./secretium-data:/secretium-data #(9)!\n      - /etc/ssl/certs:/etc/ssl/certs:ro #(10)!\n\nsecrets:\n  secretium_key:\n    file: secretium_key.txt #(11)!\n  secretium_master_username:\n    file: secretium_master_username.txt #(12)!\n  secretium_master_password:\n    file: secretium_master_password.txt #(13)!\n  secretium_domain:\n    file: secretium_domain.txt #(14)!\n</code></pre> <ol> <li>Using the official Secretium Docker image.</li> <li>Set restart rules for the container.</li> <li>Forward the exposed port <code>8787</code> on the container to port <code>8787</code> on the host machine.</li> <li>Set the HTTP scheme for your domain name.</li> <li>Set the server port number. It must be the same port as the exposed container port (<code>8787</code>).</li> <li>Set the server time zone.</li> <li>Set the server read timeout.</li> <li>Set the server write timeout.</li> <li>Set Docker volume for the container with SQLite data.</li> <li>Set Docker volume for the root SSL certificates.</li> <li>Path to the TXT file with your secret key, used in environment variables as Docker Secret.</li> <li>Path to the TXT file with your master username, used in environment variables as Docker Secret.</li> <li>Path to the TXT file with your master password, used in environment variables as Docker Secret.</li> <li>Path to the TXT file with your domain name, used in environment variables as Docker Secret.</li> </ol> <p>Docker Compose configuration</p> <p>For more information of the Docker Compose configuration, see the Configuration page.</p>"},{"location":"complete-user-guide/installation/index.html#run-container","title":"Run container","text":"<p>Run the Secretium container:</p> <pre><code>docker-compose up -d\n</code></pre> <p>You can check the logs of the container with the following command:</p> <pre><code>docker-compose logs\n</code></pre> <p>If the container was started correctly, you can go to <code>http://&lt;IP&gt;:&lt;SERVER_PORT&gt;</code> to make sure everything is working. Login to the admin dashboard with your master username and password, which you set in the previous steps.</p> <p>That's it!  Your smart self-hosted personal Secretium instance is ready to use!</p>"},{"location":"complete-user-guide/installation/index.html#next-steps","title":"Next steps","text":"<ul> <li> Get SSL certificate for your domain to be accessible via HTTPS</li> <li> Configure web/proxy server to make it available at your domain name</li> </ul>"},{"location":"complete-user-guide/installation/index.html#manual-installation","title":"Manual installation","text":"<p>You can also install the Secretium project manually.</p>"},{"location":"complete-user-guide/installation/index.html#build-from-the-source","title":"Build from the source","text":"<p>Clone the repository and go to the <code>./secretium</code> folder:</p> <pre><code>git clone https://github.com/secretium/secretium &amp;&amp; cd secretium\n</code></pre> <p>Edit everything you need and build the Docker image:</p> <pre><code>docker build -t secretium:latest .\n</code></pre> <p>You can now use your own Docker image to run a container with Secretium.</p>"},{"location":"complete-user-guide/installation/index.html#a-ready-made-packages-for-gnulinux-distros","title":"A ready-made packages for GNU/Linux distros","text":"<p>Download ready-made <code>deb</code> (for Debian, Ubuntu) and <code>rpm</code> (for CentOS, Fedora) packages from the Releases page.</p>"},{"location":"faq/index.html","title":"FAQ","text":"<p>The most common questions that may come up when using the Secretium are collected in this section.</p> <p>Can't find the answer?</p> <p>If you can't find the answer to your question here, feel free to create an issue or send a PR to the Secretium Docs repository.</p>"},{"location":"faq/index.html#where-else-can-i-read-something-about-the-secretium","title":"Where else can I read something about the Secretium?","text":"<p>We prepared articles demonstrating the main features and the major updates:</p> <ul> <li> A smart self-hosted tool for sharing secrets to your friends</li> </ul> <p>Want to see your article here?</p> <p>If you want to see your article here, feel free to send a PR to the Secretium Docs repository.</p>"},{"location":"get-pro/index.html","title":"Get Secretium PRO version","text":""},{"location":"quick-start/index.html","title":"Quick start","text":"<p>Here's a minimal version of the steps to run the Secretium on your remote server.</p>"},{"location":"quick-start/index.html#prepare-your-remote-server","title":"Prepare your remote server","text":"<p>First of all, login to your remote server and install Docker with the Compose plugin.</p> <p>Pre-configured Docker on your server?</p> <p>Most cloud providers have a pre-configured version of the image containing Docker and Docker Compose out of the box. Usually, such an image takes care of setting up the Docker environment and all necessary plugins. Check with your cloud support team to find out.</p>"},{"location":"quick-start/index.html#create-files-for-the-sensitive-data","title":"Create files for the sensitive data","text":"<p>For the security reasons, create the TXT files with the sensitive data to use them with the Docker Secrets.</p> <ul> <li> For the secret key to encrypt data:</li> </ul> <pre><code>echo \"this-is-my-secret-key-123\" &gt; secretium_key.txt\n</code></pre> <ul> <li> For the master username to login to the dashboard as admin:</li> </ul> <pre><code>echo \"this-is-my-master-username\" &gt; secretium_master_username.txt\n</code></pre> <ul> <li> For the master password to login to the dashboard as admin:</li> </ul> <pre><code>echo \"this-is-my-master-password-123\" &gt; secretium_master_password.txt\n</code></pre> <ul> <li> For the domain name of the project to share links:</li> </ul> <pre><code>echo \"example.com\" &gt; secretium_domain.txt\n</code></pre> <p>Naming of the TXT files</p> <p>For the current version of the installation (\"quick\"), it is highly recommended not to change the file names. They will be used by the automatic installation script to create required project files and running the Secretium container.</p>"},{"location":"quick-start/index.html#run-automatic-installation-script","title":"Run automatic installation script","text":"<p>Run the official <code>quick-start.sh</code> installation script from the Secretium website:</p> <pre><code>wget -O - https://secretium.org/sh/quick-start | bash\n</code></pre> <p>This script will automatically:</p> <ul> <li> Create a minimal <code>docker-compose.yml</code> file.</li> <li> Create a folder for the SQLite database.</li> <li> Run the <code>docker-compose up -d</code> command to start the container on port <code>8787</code>.</li> <li> Remove the TXT files with the sensitive data after running container.</li> </ul>"},{"location":"quick-start/index.html#configure-proxy-get-ssl-certificate","title":"Configure proxy &amp; get SSL certificate","text":"<p>Link the container to a web/proxy server (via Nginx Proxy Manager, for example) and get Let's Encrypt SSL certificate for your domain. Add it to the web/proxy server to make Secretium available over HTTPS.</p> <p>Open your browser, visit <code>https://example.com</code> and login to the admin dashboard with your master username and password, which you set in the previous steps.</p> <p>That's it!  Your smart self-hosted personal Secretium instance is ready to use!</p>"},{"location":"troubleshooting/index.html","title":"Troubleshooting","text":"<p>The most common malfunctions and problems that may come up when using the Secretium are collected in this section.</p> <p>Can't find the answer?</p> <p>If you can't find the answer to your question here, feel free to create an issue or send a PR to the Secretium project repository.</p>"},{"location":"troubleshooting/index.html#the-requested-images-platform-does-not-match-the-detected-host-platform","title":"The requested image's platform does not match the detected host platform","text":"<p>The Secretium project aims to deploy the instance in the cloud (or any remote server), therefore the official Docker image is available for GNU/Linux only:</p> <ul> <li> <code>linux/amd64</code></li> <li> <code>linux/arm64</code></li> </ul> <p>Other architectures and operating systems are not supported.</p> <p>Windows Subsystem for Linux</p> <p>Yes, Secretium perfectly works on the Windows Subsystem for Linux (WSL) too, because it uses the regular GNU/Linux distro Ubuntu.</p>"},{"location":"troubleshooting/index.html#port-x-is-taken-by-os","title":"Port X is taken by OS","text":"<p>Some operating systems may take up ports that you want to use to develop and deploy your application. You can check if a port is taken by OS by running the command:</p>  GNU/Linux macOS Windows <pre><code>lsof -iTCP -sTCP:LISTEN -P\n</code></pre> <pre><code>lsof -iTCP -sTCP:LISTEN -P\n</code></pre> <pre><code>netstat -aon\n</code></pre> <p>To change the port number, edit the <code>docker-compose.yml</code> file:</p> docker-compose.yml<pre><code>services:\n  secretium:\n    # ...\n    ports:\n      - '&lt;HOST_PORT&gt;:&lt;CONTAINER_PORT&gt;' #(1)!\n    environment:\n      # ...\n      SERVER_PORT: &lt;SERVER_PORT&gt; #(2)!\n\n# ...\n</code></pre> <ol> <li>Replace <code>&lt;HOST_PORT&gt;</code> with the port number of your host, and <code>&lt;CONTAINER_PORT&gt;</code> with the port number you want to use for the container.</li> <li>Replace <code>&lt;SERVER_PORT&gt;</code> with the same port number as the exposed container port (<code>&lt;CONTAINER_PORT&gt;</code>).</li> </ol> <p>Next, just re-build the Secretium container to apply the changes:</p> <pre><code>docker-compose up -d --build --force-recreate\n</code></pre> <p>And now, define the new container port in your proxy/web server.</p>"}]}